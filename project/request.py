from datetime import datetime
import json
from PyQt5.uic import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
import sys
import pymysql

from sqlalchemy.exc import DBAPIError, SQLAlchemyError


sys.path.insert(1, './')
from project.sql import render_query, sqlm


class Request():

    m_pb_up = "ü†π"
    m_pb_down = "ü†ª"

    @staticmethod
    def j_read() -> dict:
        with open("data/requests.json") as json_file:
            data = json.load(json_file)
        return data
        
    @staticmethod
    def j_write(data):
        with open("data/requests.json", 'w') as f:
            json.dump(data, f)



    def __init__(self, main: QMainWindow):

        # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.le_req:QLineEdit = main.le_req 
        self.pb_req:QPushButton = main.pb_req
        self.tw_story:QTableWidget = main.tw_story
        self.te_result:QTextEdit = main.te_result
        self.pb_up_down:QPushButton = main.pb_up_down
        self.te_req:QTextEdit = main.te_req
        self.sql:sqlm = main.sqlm


        # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ 
        self.write_ui(self.j_read())
        self.tw_story.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tw_story.horizontalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.te_req.hide()
        self.pb_up_down.setText(self.m_pb_up)


        # —Å–≤—è–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.pb_req.clicked.connect(self.create_req)
        self.pb_up_down.clicked.connect(self.change_req_widget)
        self.tw_story.cellDoubleClicked[int, int].connect(self.get_from_story)

        # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        self.tw_story.resizeEvent = self.resize_columns

    
    # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—á–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º –≥—Ä—É–ø–±–æ–∫—Å–µ SQL
    def resize_columns(self, e):
        self.tw_story.setColumnWidth(0, (self.tw_story.width()-20) / self.tw_story.columnCount()*0.5)
        self.tw_story.setColumnWidth(1, (self.tw_story.width()-20) / self.tw_story.columnCount()*0.5)
        self.tw_story.setColumnWidth(2, (self.tw_story.width()-20) / self.tw_story.columnCount()*2.5)
        self.tw_story.setColumnWidth(3, (self.tw_story.width()-20) / self.tw_story.columnCount()*0.5)



    # –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—á–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º –≥—Ä—É–ø–±–æ–∫—Å–µ SQL
    def write_ui(self, diction:dict):
        self.tw_story.clearContents()
        try:
            count = len(diction["dates"])
        except KeyError:
            count = 0
        self.tw_story.setRowCount(count)
        for row in range(count):
            self.tw_story.setItem(row, 0, QTableWidgetItem(diction["dates"][row][:10]))
            self.tw_story.setItem(row, 1, QTableWidgetItem(diction["dates"][row][10:19]))
            self.tw_story.setItem(row, 2, QTableWidgetItem(diction["requests"][row]))
            self.tw_story.setItem(row, 3, QTableWidgetItem(diction["status"][row]))
        


    # –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ —Ñ–∞–π–ª–µ json
    def write_json(self, content, req):

        diction = self.j_read()

        try:
            diction["dates"].append(str(datetime.now()))
        except KeyError:
            diction["dates"] = []
            diction["dates"].append(str(datetime.now()))
        try:
            diction["requests"].append(str(req))
        except KeyError:
            diction["requests"] = []
            diction["requests"].append(str(req))
        try:
            diction["answers"].append(str(content))
        except KeyError:
            diction["answers"] = []
            diction["answers"].append(str(content))
        try:
            if isinstance(content, (DBAPIError, SQLAlchemyError)):
                diction["status"].append("Fail")
            else: 
                diction["status"].append("OK")
        except KeyError:
                diction["status"] = []
                if isinstance(content, (DBAPIError, SQLAlchemyError)):
                    diction["status"].append("Fail")
                else: 
                    diction["status"].append("OK")

        

        self.j_write(diction)
        self.write_ui(diction)


    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç json —Ñ–∞–π–ª
    def clear_json(self):
        req = {
            "dates":[], 
            "requests": [],
            "answers": [],
            "status":[]
        }
        self.j_write(req)
        self.write_ui(req)


    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–ª–æ—Å–∫–∏ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –∏ –æ–±—Ä–∞—Ç–Ω–æ
    def change_req_widget(self):
        if self.pb_up_down.text() == self.m_pb_up:
            self.pb_up_down.setText(self.m_pb_down)
            self.te_req.setText(self.le_req.text())
            self.te_req.show()
            self.le_req.hide()
        else:
            self.pb_up_down.setText(self.m_pb_up)
            self.le_req.setText(self.te_req.toPlainText())
            self.le_req.show()
            self.te_req.hide()


    # –ü–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Ç–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ 
    def create_req(self):
        if self.pb_up_down.text() == self.m_pb_up:
            self.go(self.le_req.text())
        else:
            self.go(self.te_req.toPlainText())


    # –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ –±–¥, —Å –∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è—é—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–∂–µ—Ç–∞—Ö —Ä—É—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    # –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –¥–∞–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–Ω—ã–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Å—Ç–∏ –∏—Ö —É—á–µ—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –æ–∫–Ω–µ —Ä—É—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    def go(self, req):
        self.te_result.clear()
        result = self.sql.request(req)
        self.te_result.setText(str(result))
        if type(req) == str:
            self.write_json(result, req)
        else:
            self.write_json(result, render_query(req))
        return result


    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—Å–æ—Å—Ç–∞–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ –µ–≥–æ –ø–æ–ª–µ –∏ –æ—Ç–≤–µ—Ç –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ)
    def get_from_story(self, row, col):
        diction = Request.j_read()
        self.le_req.setText(diction["requests"][row])
        self.te_result.setText(diction["answers"][row])        

